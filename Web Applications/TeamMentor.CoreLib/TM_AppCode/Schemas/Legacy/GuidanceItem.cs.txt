//O2Ref:O2_Misc_Microsoft_MPL_Libs.dll
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5446
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace urn.microsoft.guidanceexplorer.guidanceItem {    
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (content?)
    /// </para>
    /// </summary>
    public class guidanceItem : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        public static explicit operator guidanceItem(XElement xe) { return XTypedServices.ToXTypedElement<guidanceItem>(xe,LinqToXsdTypeManager.Instance); }
        
        static guidanceItem() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("content", "urn:microsoft:guidanceexplorer:guidanceItem")));
        }


        //DC: Extra parameter (manually added to support the 'phase' data) - need to created XSD to take this into account
        public string phase {
            get {
                XAttribute x = this.Attribute(XName.Get("phase", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("phase", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        public string libraryId {
            get {
                XAttribute x = this.Attribute(XName.Get("libraryId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("libraryId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (content?)
        /// </para>
        /// </summary>
        public string content {
            get {
                XElement x = this.GetElement(XName.Get("content", "urn:microsoft:guidanceexplorer:guidanceItem"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("content", "urn:microsoft:guidanceexplorer:guidanceItem"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }				
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        public string id_original {
            get {
                XAttribute x = this.Attribute(XName.Get("id_original", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id_original", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string type {
            get {
                XAttribute x = this.Attribute(XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string title {
            get {
                XAttribute x = this.Attribute(XName.Get("title", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string cssFile {
            get {
                XAttribute x = this.Attribute(XName.Get("cssFile", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("cssFile", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Date {
            get {
                XAttribute x = this.Attribute(XName.Get("Date", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Date", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Author {
            get {
                XAttribute x = this.Attribute(XName.Get("Author", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Author", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Category {
            get {
                XAttribute x = this.Attribute(XName.Get("Category", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Category", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string filePath {
            get {
                XAttribute x = this.Attribute(XName.Get("filePath", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("filePath", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Priority {
            get {
                XAttribute x = Attribute(XName.Get("Priority", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Priority", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Rule_Type {
            get {
                XAttribute x = this.Attribute(XName.Get("Rule_Type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Rule_Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Source {
            get {
                XAttribute x = this.Attribute(XName.Get("Source", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Source", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Status {
            get {
                XAttribute x = this.Attribute(XName.Get("Status", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Status", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Technology {
            get {
                XAttribute x = this.Attribute(XName.Get("Technology", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Technology", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Topic {
            get {
                XAttribute x = this.Attribute(XName.Get("Topic", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Topic", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Type1 {
            get {
                XAttribute x = this.Attribute(XName.Get("Type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("guidanceItem", "urn:microsoft:guidanceexplorer:guidanceItem");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static guidanceItem Load(string xmlFile) {
            return XTypedServices.Load<guidanceItem>(xmlFile);
        }
        
        public static guidanceItem Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<guidanceItem>(xmlFile);
        }
        
        public static guidanceItem Parse(string xml) {
            return XTypedServices.Parse<guidanceItem>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("content", "urn:microsoft:guidanceexplorer:guidanceItem"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (guidanceItem)*
    /// </para>
    /// </summary>
    public class NewDataSet : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<guidanceItem> _guidanceItemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator NewDataSet(XElement xe) { return XTypedServices.ToXTypedElement<NewDataSet>(xe,LinqToXsdTypeManager.Instance); }
        
        static NewDataSet() {
            BuildElementDictionary();
        }

        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (guidanceItem)*
        /// </para>
        /// </summary>
        public IList<guidanceItem> guidanceItem {
            get {
                if ((this._guidanceItemField == null)) {
                    this._guidanceItemField = new XTypedList<guidanceItem>(this, LinqToXsdTypeManager.Instance, XName.Get("guidanceItem", "urn:microsoft:guidanceexplorer:guidanceItem"));
                }
                return this._guidanceItemField;
            }
            set {
                if ((value == null)) {
                    this._guidanceItemField = null;
                }
                else {
                    if ((this._guidanceItemField == null)) {
                        this._guidanceItemField = XTypedList<guidanceItem>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("guidanceItem", "urn:microsoft:guidanceexplorer:guidanceItem"));
                    }
                    else {
                        XTypedServices.SetList(this._guidanceItemField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("NewDataSet", "urn:microsoft:guidanceexplorer:guidanceItem");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static NewDataSet Load(string xmlFile) {
            return XTypedServices.Load<NewDataSet>(xmlFile);
        }
        
        public static NewDataSet Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<NewDataSet>(xmlFile);
        }
        
        public static NewDataSet Parse(string xml) {
            return XTypedServices.Parse<NewDataSet>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("guidanceItem", "urn:microsoft:guidanceexplorer:guidanceItem"), typeof(guidanceItem));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();
        
        private static XmlSchemaSet _schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildElementDictionary();
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((_schemaSet == null)) {
                    var tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref _schemaSet, tempSet, null);
                }
                return _schemaSet;
            }
            set {
                _schemaSet = value;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return XTypedServices.EmptyDictionary;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(XName.Get("guidanceItem", "urn:microsoft:guidanceexplorer:guidanceItem"), typeof(global::urn.microsoft.guidanceexplorer.guidanceItem.guidanceItem));
            elementDictionary.Add(XName.Get("NewDataSet", "urn:microsoft:guidanceexplorer:guidanceItem"), typeof(global::urn.microsoft.guidanceexplorer.guidanceItem.NewDataSet));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(_schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[XName.Get("guidanceItem", "urn:microsoft:guidanceexplorer:guidanceItem")];
        }
    }
    
    public class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument _doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement _rootObject;
        

    public guidanceItem guidanceItem {  get {return _rootObject as guidanceItem; } }

    public NewDataSet NewDataSet {  get {return _rootObject as NewDataSet; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(guidanceItem root) {
            this._doc = new XDocument(root.Untyped);
            this._rootObject = root;
        }
        
        public XRootNamespace(NewDataSet root) {
            this._doc = new XDocument(root.Untyped);
            this._rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return _doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            var root = new XRootNamespace();
            root._doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root._doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root._rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            var root = new XRootNamespace();
            root._doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root._doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root._rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            var root = new XRootNamespace();
            root._doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root._doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root._rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            var root = new XRootNamespace();
            root._doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root._doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root._rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            var root = new XRootNamespace {_doc = XDocument.Load(xmlReader)};
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root._doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root._rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            var root = new XRootNamespace();
            root._doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root._doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root._rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            var root = new XRootNamespace();
            root._doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root._doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root._rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            _doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            _doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            _doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            _doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            _doc.Save(fileName, options);
        }
    }
    
    public class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument _doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement _rootObject;
        

    public guidanceItem guidanceItem {  get {return _rootObject as global::urn.microsoft.guidanceexplorer.guidanceItem.guidanceItem; } }

    public NewDataSet NewDataSet {  get {return _rootObject as global::urn.microsoft.guidanceexplorer.guidanceItem.NewDataSet; } }
        
        private XRoot() {
        }
        
        public XRoot(global::urn.microsoft.guidanceexplorer.guidanceItem.guidanceItem root) {
            this._doc = new XDocument(root.Untyped);
            this._rootObject = root;
        }
        
        public XRoot(global::urn.microsoft.guidanceexplorer.guidanceItem.NewDataSet root) {
            this._doc = new XDocument(root.Untyped);
            this._rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return _doc;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            var root = new XRoot();
            root._doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root._doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root._rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            var root = new XRoot();
            root._doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root._doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root._rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            var root = new XRoot();
            root._doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root._doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root._rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            var root = new XRoot();
            root._doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root._doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root._rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            var root = new XRoot();
            root._doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root._doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root._rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            var root = new XRoot();
            root._doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root._doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root._rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            var root = new XRoot();
            root._doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root._doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root._rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            _doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            _doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            _doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            _doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            _doc.Save(fileName, options);
        }
    }
}
