
@using System
@using O2.DotNetWrappers.ExtensionMethods
@using TeamMentor.CoreLib
@using O2.FluentSharp
@using Sharpen
@using NGit
@using NGit.Diff
@using NGit.Revwalk
@using NGit.Treewalk;
@using NGit.Treewalk.Filter

@{
    int max;
    TM_UserData userData;
    string userDataLocation;
    string userStatus;
    string xmlLibraryLocation;
    string libraryStatus;
    try
    {
        max = 5;
        userData = TM_UserData.Current;
        if (userData.isNull())
        {
            @:UserData object not available, stopping execution
            return;
        }
        userDataLocation = userData.Path_UserData;
        userStatus  = userDataLocation.isGitRepository() ? userDataLocation.git_Open().status()  : "(folder is not a repository)";        
        xmlLibraryLocation = TM_Xml_Database.Current.Path_XmlLibraries;
        libraryStatus = xmlLibraryLocation.isGitRepository() ? xmlLibraryLocation.git_Open().status() : "(folder is not a repository)";

    }
    catch (Exception ex)
    {
        @:<hr /><b>Exception:</b> @ex.Message <pre>@ex.StackTrace</pre>
        return;
    }                    
}
@if (userDataLocation.isGitRepository())
{
    <span> not a git repo</span>
}

@{
    var nGit = userDataLocation.git_Open();
    var gitRepository = nGit.Repository;

    
    Func<List<string>> getRepoFiles =
        () =>
            {
                var lastCommitId = nGit.Repository.Resolve(Constants.HEAD);
                var revWalk = new RevWalk(nGit.Repository);
                var commit = revWalk.ParseCommit(lastCommitId);
                var treeWalk = new TreeWalk(nGit.Repository);
                var tree = commit.Tree;
                treeWalk.AddTree(tree);
                treeWalk.Recursive = true;
                var repoFiles = new List<string>();
                while (treeWalk.Next())
                {
                    repoFiles.Add(treeWalk.PathString);
                }
                return repoFiles;
            };
}
<h4>Git Status</h4>
<h5>User Data</h5>
    <p>
        <b>Location: </b>@userDataLocation  <br/>
        <b>is Git:</b> @userDataLocation.isGitRepository()<br/>
        <b>Repo Status:</b> @userStatus.trim()
    </p>
    
    
    
        
        
    <b>Files:</b><br/>
    <ul>
        @foreach (var file in getRepoFiles().sort())
        {
            <li><a href="GitDiff_UserData_File?file=@file">@file</a></li>
        }   
    </ul>       
    <br/>
    <b>Commits:</b><br/>
    <ul>
        
        <table class="table table-striped table-condensed">
            <tr>
                <th>Hash</th>
                <th>Date</th>
                <th>Message</th>            
                <th>Diff</th>
            </tr>   
        
        @foreach (var xrefLog in nGit.reflogs_Raw().take(max))
        {            
            <tr>
                <td>@xrefLog.GetNewId().Name</td>
                <td>@xrefLog.GetWho().GetWhen()</td>
                <td>@xrefLog.GetComment()</td>
                <td><a href="GitDiff_UserData_Commit?fromId=@xrefLog.GetOldId().Name&toId=@xrefLog.GetNewId().Name">view</a></td>
            </tr>
         }                
        </table>    
</ul>
<h4>Xml Library Data</h4>
<ul>

@{
    nGit = xmlLibraryLocation.git_Open();
}
Location: @xmlLibraryLocation  , is Git: @xmlLibraryLocation.isGitRepository()
   
    Repo Status:<pre>@libraryStatus.trim()</pre>

    
      <b>Commits:</b><br/>
    <ul>
        
        <table class="table table-striped table-condensed">
            <tr>
                <th>Hash</th>
                <th>Date</th>
                <th>Message</th>            
                <th>Diff</th>
            </tr>   
        
        @foreach (var xrefLog in nGit.reflogs_Raw().take(max))
        {            
            <tr>
                <td>@xrefLog.GetNewId().Name</td>
                <td>@xrefLog.GetWho().GetWhen()</td>
                <td>@xrefLog.GetComment().subString(0,1000)</td>
                <td><a href="GitDiff_XmlDatabase_Commit?fromId=@xrefLog.GetOldId().Name&toId=@xrefLog.GetNewId().Name">view</a></td>
            </tr>
         }                
        </table>    
</ul>



